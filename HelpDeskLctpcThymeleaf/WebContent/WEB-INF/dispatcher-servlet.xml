<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- **************************************************************** -->
	<!-- RESOURCE FOLDERS CONFIGURATION -->
	<!-- Dispatcher configuration for a JSP+JSTL ViewResolver in a -->
	<!-- Spring MVC application -->
	<!-- **************************************************************** -->
	<!-- <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/WEB-INF/views/"></property> <property name="suffix" 
		value=".jsp"></property> </bean> -->


	<!-- **************************************************************** -->
	<!-- RESOURCE FOLDERS CONFIGURATION -->
	<!-- Dispatcher configuration for serving static resources -->
	<!-- **************************************************************** -->
	<mvc:resources location="/resources/" mapping="/res/**" />
	<mvc:resources location="/resources/INSPINIA/img/" mapping="/images/**" />
	<mvc:resources location="/resources/INSPINIA/css/" mapping="/css/**" />
	<mvc:resources location="/resources/INSPINIA/js/" mapping="/js/**" />
	<mvc:resources location="/resources/INSPINIA/pages/" mapping="/pages/**" />
    <mvc:resources location="/resources/INSPINIA/fonts/" mapping="/fonts/**" />
	<!-- **************************************************************** -->
	<!-- SPRING ANNOTATION PROCESSING -->
	<!-- **************************************************************** -->
	<context:component-scan base-package="mx.com.lctpc.helpdeck.controller" />
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>


	<!-- **************************************************************** -->
	<!-- CONVERSION SERVICE -->
	<!-- Standard Spring formatting-enabled implementation -->
	<!-- **************************************************************** -->

	<bean id="conversionService"
		class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<!-- <bean class="mx.com.lctpc.helpdeck.converter.EntityToPageEntityConverter"> 
					</bean> <bean class="mx.com.lctpc.helpdeck.converter.PageEntityToEntityConverter"> 
					</bean> -->
				<bean class="mx.com.lctpc.helpdeck.converter.StringToApplicationConverter">
				</bean>
				<bean class="mx.com.lctpc.helpdeck.converter.ApplicationToStringConverter">
				</bean>
				<bean class="mx.com.lctpc.helpdeck.converter.StringToPageConverter">
				</bean>
				<bean class="mx.com.lctpc.helpdeck.converter.PageToStringConverter">
				</bean>
				<!-- <bean class="mx.com.lctpc.helpdeck.converter.StringToBigDecimalConverter">
                </bean> -->
			</list>
		</property>
	</bean>

	<!-- **************************************************************** -->
	<!-- THYMELEAF-SPECIFIC ARTIFACTS -->
	<!-- TemplateResolver <- TemplateEngine <- ViewResolver -->
	<!-- **************************************************************** -->

	<!-- SpringResourceTemplateResolver automatically integrates with Spring's 
		own -->
	<!-- resource resolution infrastructure, which is highly recommended. -->
	<bean id="templateResolver"
		class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".html" />
		<!-- HTML is the default value, added here for the sake of clarity. -->
		<property name="templateMode" value="HTML5" />
		<!-- Template cache is true by default. Set to false if you want -->
		<!--templates to be automatically updated when modified. -->
		<!-- <property name="cacheable" value="true" /> -->
	</bean>

	<!-- SpringTemplateEngine automatically applies SpringStandardDialect and -->
	<!-- enables Spring's own MessageSource message resolution mechanisms. -->
	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<!-- Enabling the SpringEL compiler with Spring 4.2.4 or newer can speed 
			up execution in most scenarios, but might be incompatible with specific cases 
			when expressions in one template are reused across different data ypes, so 
			this flag is "false" by default for safer backwards compatibility. -->
		<property name="enableSpringELCompiler" value="true" />
		<property name="additionalDialects">
			<set>
				<!-- Note the package would change to 'springsecurity3' if you are using 
					that version -->
				<bean
					class="org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect" />
			</set>
		</property>
	</bean>


	<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine" />
		<!-- NOTE 'order' and 'viewNames' are optional -->
		<property name="order" value="1" />
		<!-- <property name="viewNames" value="*.html,*.xhtml" /> -->
	</bean>





</beans>
